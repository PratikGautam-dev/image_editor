<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Image Editor</title>
  <style>
    /* General Styling */
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
      background-color: #f4f4f4;
      text-align: center;
    }

    h2 {
      color: #333;
      margin-bottom: 20px;
    }

    /* Container */
    .editor-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      width: 90%;
      max-width: 1200px;
      margin: auto;
      padding: 20px;
    }

    /* Image Display */
    .image-container {
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      background: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      text-align: center;
      margin-bottom: 20px;
    }

    .image-container img {
      width: 100%;
      max-height: 450px;
      object-fit: contain;
      border-radius: 8px;
      max-width: 100%;
      height: auto;
    }

    /* Options Section */
    .options-container {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 20px;
      max-width: 900px;
    }

    .option {
      flex: 1;
      min-width: 280px;
      background: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      text-align: center;
    }

    /* Buttons */
    .btn {
      display: inline-block;
      text-decoration: none;
      background: #007bff;
      color: #fff;
      padding: 10px 15px;
      border-radius: 5px;
      margin-top: 10px;
      transition: 0.3s;
      border: none;
      cursor: pointer;
    }

    .btn:hover {
      background: #0056b3;
    }

    /* Form Styling */
    form {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 10px;
    }

    label {
      font-weight: bold;
    }

    input, select {
      width: 80%;
      padding: 8px;
      margin: 5px 0;
      border: 1px solid #ccc;
      border-radius: 5px;
      text-align: center;
    }

    button {
      background: #28a745;
      color: white;
      padding: 10px;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    button:hover {
      background: #218838;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .options-container {
        flex-direction: column;
        align-items: center;
      }
      .option {
        width: 100%;
      }
    }

    .editing-options {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      padding: 20px;
    }

    .edit-option {
      padding: 15px;
      border: 1px solid #ddd;
      border-radius: 8px;
    }

    /* Add this to your existing styles */
    .download-button {
      background: #007bff;
      color: white;
      padding: 15px 30px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
      margin-top: 20px;
      border: none;
      transition: background 0.3s ease;
    }

    .download-button:hover {
      background: #0056b3;
    }
  </style>
</head>
<body>

  <h2>Image Editing Options</h2>
  
  <!-- Image Display -->
  <div class="editor-container">
    <div class="image-container">
      <img src="<%= imageUrl %>" alt="Uploaded Image" id="editImage">
    </div>

    <!-- Editing Options -->
    <div class="editing-options">

      <!-- Resize Image -->
      <div class="edit-option">
        <h3>Resize Image</h3>
        <input type="number" id="width" placeholder="Width">
        <input type="number" id="height" placeholder="Height">
        <button onclick="transformImage('resize')">Resize</button>
      </div>

      <!-- Rotate Image -->
      <div class="edit-option">
        <h3>Rotate Image</h3>
        <input type="number" id="rotation" placeholder="Degrees" value="90">
        <button onclick="transformImage('rotate')">Rotate</button>
      </div>

      <!-- Format Conversion -->
      <div class="edit-option">
        <h3>Format Conversion</h3>
        <select id="format">
          <option value="jpg">JPG</option>
          <option value="png">PNG</option>
          <option value="webp">WebP</option>
        </select>
        <button onclick="transformImage('format')">Convert</button>
      </div>

      <!-- Quality -->
      <div class="edit-option">
        <h3>Quality</h3>
        <input type="number" id="quality" placeholder="1-100" value="80">
        <button onclick="transformImage('quality')">Adjust Quality</button>
      </div>

      <!-- Background Removal -->
      <div class="edit-option">
        <h3>Remove Background</h3>
        <button onclick="removeBackground()">Remove Background</button>
      </div>

      <!-- Filters -->
      <div class="edit-option">
        <h3>Apply Filter</h3>
        <select id="filter">
          <option value="grayscale">Grayscale</option>
          <option value="sepia">Sepia</option>
          <option value="blur">Blur</option>
          <option value="sharpen">Sharpen</option>
        </select>
        <button onclick="transformImage('filter')">Apply Filter</button>
      </div>

    </div>
    
    <!-- Download Button -->
    <button class="download-button" onclick="downloadImage()">Download Edited Image</button>
  </div>

  <script>
    let currentTransformations = new URLSearchParams();

    async function transformImage(type) {
        try {
            const fileId = '<%= fileId %>';
            if (!fileId) {
                throw new Error('File ID not found');
            }
            
            switch(type) {
                case 'resize':
                    const width = document.getElementById('width').value;
                    const height = document.getElementById('height').value;
                    if (width) currentTransformations.set('width', width);
                    if (height) currentTransformations.set('height', height);
                    break;
                case 'rotate':
                    currentTransformations.set('rotation', document.getElementById('rotation').value || '90');
                    break;
                case 'format':
                    currentTransformations.set('format', document.getElementById('format').value);
                    break;
                case 'quality':
                    currentTransformations.set('quality', document.getElementById('quality').value || '80');
                    break;
                case 'filter':
                    currentTransformations.set('filter', document.getElementById('filter').value);
                    break;
            }

            const response = await fetch(`/edits/transform/${fileId}?${currentTransformations.toString()}`);
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(errorText || 'Transform request failed');
            }
            
            const data = await response.json();
            if (data.transformedUrl) {
                const img = document.getElementById('editImage');
                img.src = data.transformedUrl;
                
                // Force image refresh
                img.onload = () => {
                    console.log('Image transformed successfully');
                };
                img.onerror = (e) => {
                    console.error('Error loading transformed image:', e);
                    alert('Failed to load transformed image');
                };
            }
        } catch (error) {
            console.error('Transformation failed:', error);
            alert('Failed to transform image: ' + error.message);
        }
    }

    async function removeBackground() {
      try {
        const fileId = '<%= fileId %>';
        const response = await fetch(`/edits/remove-bg/${fileId}`);
        if (!response.ok) throw new Error('Background removal failed');
        
        const data = await response.json();
        document.getElementById('editImage').src = data.transformedUrl;
      } catch (error) {
        console.error('Background removal failed:', error);
        alert('Failed to remove background: ' + error.message);
      }
    }

    async function downloadImage() {
      try {
        const img = document.getElementById('editImage');
        const imageUrl = img.src;
        
        // Create a temporary link element
        const link = document.createElement('a');
        link.href = imageUrl;
        link.download = 'edited-image.' + (imageUrl.split('.').pop().split('?')[0] || 'jpg');
        
        // Append link to body, click it, and remove it
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      } catch (error) {
        console.error('Download failed:', error);
        alert('Failed to download image: ' + error.message);
      }
    }
  </script>

</body>
</html>

